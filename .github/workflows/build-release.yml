name: Build and Release Excella

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'

permissions:
  contents: write
  actions: read

jobs:
  build-executable:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Build executable
        run: |
          if (Test-Path "build_single_bat.bat") {
            .\build_single_bat.bat onedir
          } else {
            Write-Host "build_single_bat.bat not found, running pyinstaller directly"
            pyinstaller --onefile --windowed --name Excella main.py
          }

      - name: Verify executable creation
        run: |
          if (Test-Path "dist\Excella\Excella.exe") {
            Write-Host "✓ Executable built successfully"
            Get-ChildItem "dist\Excella\" -Recurse
          } elseif (Test-Path "dist\Excella.exe") {
            Write-Host "✓ Single file executable built successfully"
            New-Item -ItemType Directory -Force -Path "dist\Excella"
            Move-Item "dist\Excella.exe" "dist\Excella\Excella.exe"
          } else {
            Write-Host "✗ Executable not found"
            Get-ChildItem "dist" -Recurse -ErrorAction SilentlyContinue
            exit 1
          }

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: excella-executable
          path: dist/Excella/
          retention-days: 7

  build-installer:
    needs: build-executable
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: excella-executable
          path: dist/Excella/

      - name: Install Inno Setup
        run: |
          $url = "https://files.jrsoftware.org/is/6/innosetup-6.3.3.exe"
          $output = "$env:TEMP\innosetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
          Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait

      - name: Add Inno Setup to PATH
        run: |
          $innoPath = "${env:ProgramFiles(x86)}\Inno Setup 6"
          if (-not (Test-Path $innoPath)) {
            $innoPath = "${env:ProgramFiles}\Inno Setup 6"
          }
          if (Test-Path $innoPath) {
            echo $innoPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            exit 1
          }

      - name: Create missing files for installer
        run: |
          if (-not (Test-Path "icon.ico")) { Write-Host "Creating placeholder icon.ico"; … }
          if (-not (Test-Path "requirements.txt")) { Write-Host "Creating placeholder requirements.txt"; … }
          if (-not (Test-Path "excella_setup.iss")) { Write-Host "Creating basic Inno Setup script"; … }

      - name: Build installer
        run: |
          Write-Host "Checking if ISCC is available…"
          try {
            $iscc = Get-Command iscc -ErrorAction Stop
            & $iscc.Source "excella_setup.iss"
          } catch {
            $found = Get-ChildItem "${env:ProgramFiles(x86)}\Inno Setup 6","${env:ProgramFiles}\Inno Setup 6" -Filter "iscc.exe" -Recurse | Select-Object -First 1
            if ($found) { & $found.FullName "excella_setup.iss" } else { exit 1 }
          }

      - name: Verify installer creation
        run: |
          if (-not (Test-Path "installer\*.exe")) {
            if (Test-Path "*.exe") {
              New-Item -ItemType Directory -Force -Path "installer"
              Move-Item "*.exe" "installer/"
            } else {
              exit 1
            }
          }

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: excella-installer
          path: installer/*.exe
          retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build-executable
      - build-installer
    runs-on: windows-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download installer artifact
        uses: actions/download-artifact@v4
        with:
          name: excella-installer
          path: installer/

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: excella-executable
          path: executable/

      - name: Create ZIP of portable executable
        run: Compress-Archive -Path "executable\*" -DestinationPath "Excella_Portable_${{ github.ref_name }}.zip"

      - name: Get release info
        id: release_info
        run: |
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          $inst = Get-ChildItem "installer\*.exe" | Select-Object -First 1
          echo "installer_name=$($inst.Name)" >> $GITHUB_OUTPUT
          echo "installer_path=$($inst.FullName)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag }}
          name: Excella ${{ steps.release_info.outputs.version }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          body: |
            ## Excella ${{ steps.release_info.outputs.version }}
            - **Installer**: ${{ steps.release_info.outputs.installer_name }}
            - **Portable**: Excella_Portable_${{ github.ref_name }}.zip
          files: |
            installer/*.exe
            Excella_Portable_${{ github.ref_name }}.zip
          token: ${{ secrets.TOKEN_LOL }}

  test-installer:
    needs: build-installer
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    runs-on: windows-latest
    steps:
      - name: Download installer artifact
        uses: actions/download-artifact@v4
        with:
          name: excella-installer
          path: installer/

      - name: Test installer (silent install/uninstall)
        run: |
          $installer = Get-ChildItem "installer\*.exe" | Select-Object -First 1
          if ($installer) {
            Start-Process -FilePath $installer.FullName -ArgumentList "/VERYSILENT","/SUPPRESSMSGBOXES","/NORESTART","/DIR=$env:TEMP\ExcellaTest" -Wait
            if (-not (Test-Path "$env:TEMP\ExcellaTest\Excella.exe")) { exit 1 }
            $uninstaller = "$env:TEMP\ExcellaTest\unins000.exe"
            if (Test-Path $uninstaller) {
              Start-Process -FilePath $uninstaller -ArgumentList "/VERYSILENT","/SUPPRESSMSGBOXES","/NORESTART" -Wait
            }
          } else {
            exit 1
          }
